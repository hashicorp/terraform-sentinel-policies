# Common functions that use the tfrun import

##### Imports #####
import "tfrun"
import "decimal"

##### Functions #####

### limit_proposed_monthly_cost ###
# Validate that the proposed monthly cost is less than the limit
limit_proposed_monthly_cost = func(limit) {

	# Check whether cost estimate is available
	# It should be for Terraform 0.12.x
	# It should not be for Terraform 0.11.x
	if tfrun.cost_estimate else null is null {
		print("No cost estimates available")
		# Allow the policy to pass
		return true
	}

	# Determine proposed monthly cost
	proposed_cost = decimal.new(tfrun.cost_estimate.proposed_monthly_cost)

	# Compare proposed monthly cost to the limit
	if proposed_cost.lte(limit) {
		print("Proposed monthly cost", proposed_cost.string,
			"is under the limit:", limit.string)
		return true
	} else {
		print("Proposed monthly cost", proposed_cost.string,
			"is over the limit:", limit.string)
		return false
	}
}

### limit_cost_and_percentage_increase ###
# Validate that the proposed cost is less than the given limit and
# that the percentage increase in the monthly cost
# is less than a given percentage
limit_cost_and_percentage_increase = func(limit, max_percent) {

	validated = true

	# Check whether cost estimate is available
	# It should be for Terraform 0.12.x
	# It should not be for Terraform 0.11.x
	if tfrun.cost_estimate else null is null {
		print("No cost estimates available")
		# Allow the policy to pass
		return true
	}

	# Determine cost data
	prior_cost = decimal.new(tfrun.cost_estimate.prior_monthly_cost)
	proposed_cost = decimal.new(tfrun.cost_estimate.proposed_monthly_cost)
	increase_in_cost = decimal.new(tfrun.cost_estimate.delta_monthly_cost)

	# Compare proposed monthly cost to the limit
	if proposed_cost.gt(limit) {
		print("Proposed monthly cost", proposed_cost.string,
			"is over the limit:", limit.string)
		validated = false
	}

	# If prior_cost is not 0.0, compare percentage increase in monthly cost
	# to max_percent
	if prior_cost.is_not(0.0) {
		percentage_change = increase_in_cost.divide(prior_cost).multiply(100)
		if decimal.new(percentage_change).gt(max_percent) {
			print("Proposed percentage increase", percentage_change.float,
				"is over the max percentage change:", max_percent.float)
			validated = false
		} else {
			print("Proposed percentage increase", percentage_change.float,
				"is under the max percentage change:", max_percent.float)
		}
	}

	return validated

}

### limit_cost_by_workspace_name ###
# Validate that the proposed monthly cost is less than the limit
# This accepts a map, limits, whose keys should be strings like
# "dev", "qa", or "prod" and whose values should be expressions like
# decimal.new(200) (which indicates a monthly limit of $200).
# The keys are treated as allowed workspace name prefixes and suffixes.
# If a workspace does not have one of the keys as a prefix or suffix, it will
# fail the policy.
limit_cost_by_workspace_name = func(limits) {

	# Check whether cost estimate is available
	# It should be for Terraform 0.12.x
	# It should not be for Terraform 0.11.x
	if tfrun.cost_estimate else null is null {
		print("No cost estimates available")
		# Allow the policy to pass
		return true
	}

	# Get workspace name
	workspace_name = tfrun.workspace.name

	# Iterate over the limits map to determine limit
	the_limit = decimal.new(0)
	matching_name_found = false
	for limits as name, limit {
		if workspace_name matches "(.+)-" + name + "$" or
			workspace_name matches "^" + name + "-(.+)$" {
			the_limit = limits[name]
			matching_name_found = true
			break
		}
	}

	# Print message if workspace name did not match any keys
	if matching_name_found is false {
		print("The current workspace", workspace_name,
			"is not allowed because no cost limits are associated with a",
			"regular expression matching its name.")
		return false
	}

	# Determine proposed monthly cost
	proposed_cost = decimal.new(tfrun.cost_estimate.proposed_monthly_cost)

	# Compare proposed monthly cost to the limit
	if proposed_cost.lte(the_limit) {
		print("Proposed monthly cost", proposed_cost.string,
			"of workspace", workspace_name,
			"is under the limit:", the_limit.string)
		return true
	} else {
		print("Proposed monthly cost", proposed_cost.string,
			"of workspace", workspace_name,
			"is over the limit:", the_limit.string)
		return false
	}
}
