# This policy uses the tfconfig/v2 import to evaluate
# variables set in calls to nested modules, but only if
# they are set as constant values. For module variables
# that are set to references, it just prints the references.

# Import common-functions/tfconfig-functions/tfconfig-functions.sentinel
# with alias "config"
import "tfconfig-functions" as config

# Get all modules called from root module
rootModuleCalls = config.find_module_calls_in_module("")

evaluate_variables = func() {
	for rootModuleCalls as address, m {
		for m.config else {} as key, value {
			if "constant_value" in keys(value) {
				print("module", address, "has variable", key,
					"with value", value.constant_value)
			} else if "references" in keys(value) {
				print("module", address, "has variable", key,
					"with references:", value.references)
			} // end constant_value check
		} //end keys loop
	} // end modules loop

	return true
}

# Main Rule
validated = evaluate_variables()
main = rule {
	validated
}
