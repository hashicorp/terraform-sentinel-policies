# This policy uses the tfconfig/v2 import to prohibit providers
# from a prohibited list

# It used to only use the providers collection of the tfconfig/v2 import, but
# that did not block use of resources and data sources from prohibited providers
# when no provider block was included in the Terraform configuration. So, it now
# also blocks resources and data sources from prohibited providers using the
# resources collection of the tfconfig/v2 import.

# Import common-functions/tfconfig-functions/tfconfig-functions.sentinel
# with alias "config"
import "tfconfig-functions" as config
import "general-functions" as general

# List of prohibited providers
prohibited_list = ["external", "http", "null"]

# Get all providers from providers collection
allProviders = config.all_providers()

# Filter to providers with violations
# Warnings will not be printed for violations since the last parameter is false
violatingProviders = config.attribute_in_list(allProviders,
                     "name", prohibited_list, false)

# Print any violations
prohibitedProvidersCount = length(violatingProviders["messages"])
if prohibitedProvidersCount > 0 {
  general.print_violations(violatingProviders["messages"], "Provider")
}

# Initialize resource and data source counts
prohibitedResourcesCount = 0
prohibitedDataSourcesCount = 0

# Iterate over prohibited providers to find resources and data sources
for prohibited_list as p {

  # Process resources for current provider
  prohibitedResources = config.resources_by_provider(p)
  if length(prohibitedResources) > 0 {
    print("Resources from provider", p, "are not allowed.")
    prohibitedResourcesCount += length(prohibitedResources)
    for prohibitedResources as address, r {
      print("Resource", address, "from provider", p, "is not allowed.")
    } // end for prohibitedResources
  } // end if

  # Process data sources for current provider

  prohibitedDataSources = config.datasources_by_provider(p)
  if length(prohibitedDataSources) > 0 {
    print("Data sources from provider", p, "are not allowed.")
    prohibitedDataSourcesCount += length(prohibitedDataSources)
    for prohibitedDataSources as address, r {
      print("Data source", address, "from provider", p, "is not allowed.")
    } // end for prohibitedDataSources
  } // end if

} // end for providers

# Main rule
violations = prohibitedProvidersCount + prohibitedResourcesCount +
             prohibitedDataSourcesCount
main = rule {
  violations is 0
}
