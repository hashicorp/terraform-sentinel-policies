# This policy uses the Sentinel tfstate and tfrun imports to restrict the
# workspaces from which remote state can be retrieved using the
# terraform_remote_state data source. It provides a map between
# prefixes and suffixes of names of workspaces that want to read remote state
# and specific workspaces from which they can read it.

# IMPORTANT CAVEAT: Since this policy would be run AFTER the `terraform plan`
# has already been run, it can really only be used to report violations of
# remote state access. It does not fully address the security concern of
# preventing exfiltration of remote state. In particular, a Terraform developer
# could echo the remote state to outputs and see it in the log of their plan.
# They could also use the external and http data sources (if not banned by
# another Sentinel policy) to send the remote state data to and external API
# endpoint. Another issue is that workspace admins can change the name of their
# workspaces.

# The Terraform Cloud team is working on enhancements to TFC's
# RBAC system that will better secure and control remote state access. So, please
# only consider this policy a stop-gap until that enhancement is released.

# Import common-functions/tfstate-functions/tfstate-functions.sentinel
# with alias "state"
import "tfstate-functions" as state
import "general-functions" as general

# Use standard tfrun import
import "tfrun"

# Mapping between environments and lists of workspaces from which remote state
# can be retrieved. The keys should be strings which will be the prefixes or
# suffixes of workspace names.
# Be sure to include the key "invalid" to represent workspaces with names that
# do not match any of the allowed workspace naming patterns and to set its value
# to the empty list, []. These workspace names are allowed, but the workspaces
# with these names are not allowed to access remote state.
param allowed_workspaces default {
  "dev": ["vpc-dev", "s3-dev", "sec-group-dev"],
  "qa": ["vpc-qa", "s3-qa", "sec-group-qa"],
  "prod": ["vpc-prod", "s3-prod", "sec-group-prod"],
  "invalid": [],
}

# Get the workspace name from the tfrun import
workspace_name = tfrun.workspace.name

# Determine the workspace environment (key of allowed_workspaces list)
matching_env_found = false
workspace_env = ""
for allowed_workspaces as env, workspaces {
  if workspace_name matches "(.+)-" + env + "$" or
     workspace_name matches "^" + env + "-(.+)$" {
    workspace_env = env
    matching_env_found = true
    break
  }
}

# Deal with workspaces names that do not match patterns
if not matching_env_found {
  workspace_env = "invalid"
}

# Find instances of remote state data sources
remoteStates = state.datasources("terraform_remote_state")

# Filter remote state data sources to violations
violatingRemoteStates = state.attribute_not_in_list(remoteStates,
                        "config.workspaces.name",
                        allowed_workspaces[workspace_env], false)

# Determine if there are any violations
validated = true
if length(violatingRemoteStates["messages"]) is not 0 {
  validated = false
  # Special processing for workspace names that do not match an environment
  if workspace_env is "invalid" {
    # delete the "invalid" key from allowed_workspaces to improve message
    delete(allowed_workspaces, "invalid")
    print("The current workspace", workspace_name, "is not allowed to access",
          "remote state from other workspaces because its name does not match",
          "any of the allowed regular expressions in", keys(allowed_workspaces))
  }
  # Print generic violation message
  print("This workspace tried to access remote state from workspaces",
        "it is not allowed to access.")
  # Print specific violation messages for instances of the terraform_remote_state
  # data source
  general.print_violations(violatingRemoteStates["messages"], "Data source")
}

# Main rule
main = rule {
  validated
}
